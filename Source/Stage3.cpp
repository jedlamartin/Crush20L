/*
  ==============================================================================

    Stage3.cpp
    Created: 21 Apr 2024 5:02:14pm
    Author:  Martin

  ==============================================================================
*/

#include "Stage3.h"

template <typename T, size_t cols, size_t rows>
class Matrix {
private:
    std::array<T, cols * rows> arr;
};

static std::array<float, 4> matrixMul(const std::array<float, 16>& A, const std::array<float, 4>& B) {
    std::array<float, 4> C;
    C[0] = A[0] * B[0] + A[1] * B[1] + A[2] * B[2] + A[3] * B[3];
    C[1] = A[4] * B[0] + A[5] * B[1] + A[6] * B[2] + A[7] * B[3];
    C[2] = A[8] * B[0] + A[9] * B[1] + A[10] * B[2] + A[11] * B[3];
    C[3] = A[12] * B[0] + A[13] * B[1] + A[14] * B[2] + A[15] * B[3];
    return C;
}

static std::array<float, 16> matrixMul(const std::array<float, 16>& A, const std::array<float, 16>& B) {
    std::array<float, 16> C;
    C[0] = A[0] * B[0] + A[1] * B[4] + A[2] * B[8] + A[3] * B[12];
    C[1] = A[0] * B[1] + A[1] * B[5] + A[2] * B[9] + A[3] * B[13];
    C[2] = A[0] * B[2] + A[1] * B[6] + A[2] * B[10] + A[3] * B[14];
    C[3] = A[0] * B[3] + A[1] * B[7] + A[2] * B[11] + A[3] * B[15];
    
    C[4] = A[4] * B[0] + A[5] * B[4] + A[6] * B[8] + A[7] * B[12];
    C[5] = A[4] * B[1] + A[5] * B[5] + A[6] * B[9] + A[7] * B[13];
    C[6] = A[4] * B[2] + A[5] * B[6] + A[6] * B[10] + A[7] * B[14];
    C[7] = A[4] * B[3] + A[5] * B[7] + A[6] * B[11] + A[7] * B[15];

    C[8] = A[8] * B[0] + A[9] * B[4] + A[10] * B[8] + A[11] * B[12];
    C[9] = A[8] * B[1] + A[9] * B[5] + A[10] * B[9] + A[11] * B[13];
    C[10] = A[8] * B[2] + A[9] * B[6] + A[10] * B[10] + A[11] * B[14];
    C[11] = A[8] * B[3] + A[9] * B[7] + A[10] * B[11] + A[11] * B[15];

    C[12] = A[12] * B[0] + A[13] * B[4] + A[14] * B[8] + A[15] * B[12];
    C[13] = A[12] * B[1] + A[13] * B[5] + A[14] * B[9] + A[15] * B[13];
    C[14] = A[12] * B[2] + A[13] * B[6] + A[14] * B[10] + A[15] * B[14];
    C[15] = A[12] * B[3] + A[13] * B[7] + A[14] * B[11] + A[15] * B[15];
    return C;
}

static float matrixMul(const std::array<float, 4>& A, const std::array<float, 4>& B) {
    return A[0] * B[0] + A[1] * B[1] + A[2] * B[2] + A[3] * B[3];
}

static std::array<float, 4> matrixMul(const std::array<float, 4>& A, float B) {
    std::array<float, 4> C{};
    for (int i = 0; i < A.size(); i++) {
        C[i] = B * A[i];
    }
    return C;
}

static std::array<float, 4> matrixAdd(const std::array<float, 4>& A, const std::array<float, 4>& B) {
    std::array<float, 4> C;
    C[0] = A[0] + B[0];
    C[0] = A[1] + B[1];
    C[0] = A[2] + B[2];
    C[0] = A[3] + B[3];
    return C;
}

static bool gluInvertMatrix(const std::array<float, 16>& m, std::array<float, 16>& invOut)
{
    std::array<float, 16> inv;
    float det;
    int i;

    inv[0] = m[5] * m[10] * m[15] -
        m[5] * m[11] * m[14] -
        m[9] * m[6] * m[15] +
        m[9] * m[7] * m[14] +
        m[13] * m[6] * m[11] -
        m[13] * m[7] * m[10];

    inv[4] = -m[4] * m[10] * m[15] +
        m[4] * m[11] * m[14] +
        m[8] * m[6] * m[15] -
        m[8] * m[7] * m[14] -
        m[12] * m[6] * m[11] +
        m[12] * m[7] * m[10];

    inv[8] = m[4] * m[9] * m[15] -
        m[4] * m[11] * m[13] -
        m[8] * m[5] * m[15] +
        m[8] * m[7] * m[13] +
        m[12] * m[5] * m[11] -
        m[12] * m[7] * m[9];

    inv[12] = -m[4] * m[9] * m[14] +
        m[4] * m[10] * m[13] +
        m[8] * m[5] * m[14] -
        m[8] * m[6] * m[13] -
        m[12] * m[5] * m[10] +
        m[12] * m[6] * m[9];

    inv[1] = -m[1] * m[10] * m[15] +
        m[1] * m[11] * m[14] +
        m[9] * m[2] * m[15] -
        m[9] * m[3] * m[14] -
        m[13] * m[2] * m[11] +
        m[13] * m[3] * m[10];

    inv[5] = m[0] * m[10] * m[15] -
        m[0] * m[11] * m[14] -
        m[8] * m[2] * m[15] +
        m[8] * m[3] * m[14] +
        m[12] * m[2] * m[11] -
        m[12] * m[3] * m[10];

    inv[9] = -m[0] * m[9] * m[15] +
        m[0] * m[11] * m[13] +
        m[8] * m[1] * m[15] -
        m[8] * m[3] * m[13] -
        m[12] * m[1] * m[11] +
        m[12] * m[3] * m[9];

    inv[13] = m[0] * m[9] * m[14] -
        m[0] * m[10] * m[13] -
        m[8] * m[1] * m[14] +
        m[8] * m[2] * m[13] +
        m[12] * m[1] * m[10] -
        m[12] * m[2] * m[9];

    inv[2] = m[1] * m[6] * m[15] -
        m[1] * m[7] * m[14] -
        m[5] * m[2] * m[15] +
        m[5] * m[3] * m[14] +
        m[13] * m[2] * m[7] -
        m[13] * m[3] * m[6];

    inv[6] = -m[0] * m[6] * m[15] +
        m[0] * m[7] * m[14] +
        m[4] * m[2] * m[15] -
        m[4] * m[3] * m[14] -
        m[12] * m[2] * m[7] +
        m[12] * m[3] * m[6];

    inv[10] = m[0] * m[5] * m[15] -
        m[0] * m[7] * m[13] -
        m[4] * m[1] * m[15] +
        m[4] * m[3] * m[13] +
        m[12] * m[1] * m[7] -
        m[12] * m[3] * m[5];

    inv[14] = -m[0] * m[5] * m[14] +
        m[0] * m[6] * m[13] +
        m[4] * m[1] * m[14] -
        m[4] * m[2] * m[13] -
        m[12] * m[1] * m[6] +
        m[12] * m[2] * m[5];

    inv[3] = -m[1] * m[6] * m[11] +
        m[1] * m[7] * m[10] +
        m[5] * m[2] * m[11] -
        m[5] * m[3] * m[10] -
        m[9] * m[2] * m[7] +
        m[9] * m[3] * m[6];

    inv[7] = m[0] * m[6] * m[11] -
        m[0] * m[7] * m[10] -
        m[4] * m[2] * m[11] +
        m[4] * m[3] * m[10] +
        m[8] * m[2] * m[7] -
        m[8] * m[3] * m[6];

    inv[11] = -m[0] * m[5] * m[11] +
        m[0] * m[7] * m[9] +
        m[4] * m[1] * m[11] -
        m[4] * m[3] * m[9] -
        m[8] * m[1] * m[7] +
        m[8] * m[3] * m[5];

    inv[15] = m[0] * m[5] * m[10] -
        m[0] * m[6] * m[9] -
        m[4] * m[1] * m[10] +
        m[4] * m[2] * m[9] +
        m[8] * m[1] * m[6] -
        m[8] * m[2] * m[5];

    det = m[0] * inv[0] + m[1] * inv[4] + m[2] * inv[8] + m[3] * inv[12];

    if (det == 0)
        return false;

    det = 1.0 / det;

    for (i = 0; i < 16; i++)
        invOut[i] = inv[i] * det;

    return true;
}

static float closestElementLinearInterpolate(const float x, const std::vector<float>& xArray, const std::vector<float>& yArray) {
    size_t size = xArray.size();
    if (x < xArray[0]) {
        return yArray[0];
    }
    else if (x > xArray[size - 1]) {
        return yArray[size - 1];
    }
    int i = 0, j = size, mid = 0;
    while (i < j) {
        mid = (i + j) / 2;

        if (xArray[mid] == x) {
            return yArray[mid];
        }

        if (x < xArray[mid]) {
            if (mid > 0 && x > xArray[mid - 1]) {
                float div = xArray[mid] - xArray[mid - 1];
                float mull = (xArray[mid] - x) / div;
                float mulr = (x - xArray[mid - 1]) / div;
                float test = xArray[mid - 1] * mull + xArray[mid] * mulr;
                return yArray[mid - 1] * mull + yArray[mid] * mulr;
            }
            j = mid;
        }
        else {
            if (mid < size - 1 && x < xArray[mid + 1]) {
                float div = xArray[mid + 1] - xArray[mid];
                float mull = (xArray[mid + 1] - x) / div;
                float mulr = (x - xArray[mid]) / div;
                float test = yArray[mid] * mull + yArray[mid + 1] * mulr;
                return yArray[mid] * mull + yArray[mid + 1] * mulr;
            }
            i = mid + 1;
        }
    }
    return yArray[mid];
}

void Stage3::configure(double sampleRate) {

    float T = static_cast<float>(1 / sampleRate);
    float h = static_cast<float>(2 * sampleRate);

    float R22 = 47000;
    float R33 = 6800;
    float R34 = 1000;
    float R37; //PARAMETER
    if (*this->odButton > 0.5) {
        R37 = 50000.0f + 0.01f - *this->odParameter;
    }
    else {
        R37 = 100000;
    }
    float C12 = 220e-9;
    float C18 = 470e-12;
    float E13 = 2.2e-6;
    float E14 = 2.2e-6;

    std::array<float, 16> A{ 0.0f };
    std::array<float, 4> B{ 0.0f };
    std::array<float, 4> C{ 0.0f };
    float F;


    A[0] = -1 / (C12 * (R37 + R34)) - 1 / (C12 * R33);
    //A[1] = 0;
    A[2] = -1 / (C12 * (R37 + R34));
    //A[3] = 0;
    A[4] = 1 / (C18 * (R37 + R34));
    A[5] = -1 / (R22 * C18);
    A[6] = 1 / (C18 * (R37 + R34));
    //A[7] = 0;
    A[8] = -1 / (E13 * (R37 + R34));
    //A[9] = 0;
    A[10] = -1 / (E13 * (R37 + R34));
    //A[11] = 0;
    //A[12] = 0;
    //A[13] = 0;
    //A[14] = 0;
    //A[15] = 0;

    B[0] = -1 / (C12 * (R37 + R34));
    B[1] = 1 / (C18 * (R37 + R34));
    B[2] = -1 / (E13 * (R37 + R34));
    //B[3] = 0;

    C[0] = R37 / (C12 * (R37 + R34));
    C[1] = -R37 / (C18 * (R37 + R34));
    C[2] = R37 / (E13 * (R37 + R34));
    C[3] = -1 / E14;

    this->D[0] = -R37 / (R37 + R34);
    this->D[1] = 1;
    this->D[2] = -R37 / (R37 + R34);
    this->D[3] = 1;

    this->E = R34 / (R34 + R37);
    F = -R34 * R37 / (R37 + R34);

    std::array<float, 16> I = { h,0,0,0,0,h,0,0,0,0,h,0,0,0,0,h };
    std::array<float, 16> IhmA{0};
    std::array<float, 16> IhpA{0};
    for (int i = 0; i < I.size(); i++) {
        IhmA[i] = I[i] - A[i];
        IhpA[i] = I[i] + A[i];
    }
    std::array<float, 16> inv{0};
    gluInvertMatrix(IhmA, inv);

    this->G = matrixMul(inv, C);
    this->H = matrixMul(inv, IhpA);
    this->J = matrixMul(inv, B);
    this->K = matrixMul(this->D, this->G) + F;

    for (int i = 0; i < this->x.size(); i++) {
        this->p[i] = (this->x[i] - this->K * this->y[i]);
    }


    // saturation parameters
    A[0] = -1 / (C12 * (R37 + R34)) - 1 / (C12 * R33);
    A[1] = 1/(C12*(R37+R34));
    A[2] = -1 / (C12 * (R37 + R34));
    //A[3] = 0;
    A[4] = 1 / (C18 * (R37 + R34));
    A[5] = -1 / (R22 * C18) - 1 / (C18 * (R37 + R34));
    A[6] = 1 / (C18 * (R37 + R34));
    //A[7] = 0;
    A[8] = -1 / (E13 * (R37 + R34));
    A[9] = 1 / (E13 * (R34 + R37));
    A[10] = -1 / (E13 * (R37 + R34));
    //A[11] = 0;
    //A[12] = 0;
    //A[13] = 0;
    //A[14] = 0;
    //A[15] = 0;

    this->DSat[0] = -R37 / (R37 + R34);
    this->DSat[1] = R34 / (R37 + R34);
    this->DSat[2] = -R37 / (R37 + R34);
    this->DSat[3] = 1;

    for (int i = 0; i < I.size(); i++) {
        IhmA[i] = I[i] - A[i];
        IhpA[i] = I[i] + A[i];
    }
    gluInvertMatrix(IhmA, inv);

    this->GSat = matrixMul(inv, C);
    this->HSat = matrixMul(inv, IhpA);
    this->JSat = matrixMul(inv, B);
    this->KSat = matrixMul(this->DSat, this->GSat) + F;

    for (int i = 0; i < this->x.size(); i++) {
        this->pSat[i] = (this->x[i] - this->KSat * this->y[i]);
    }
}

void Stage3::initParameters(std::atomic<float>* odParameter, std::atomic<float>* odButton) {
    this->odParameter = odParameter;
    this->odButton = odButton;
    this->cutOffVoltage = 13.45f;
    this->wmax = 0;
    this->inmax = 0;

    //1001 points
    // ezt kell fixelni!!!!! 150mA-ig legeneralni az egeszet, meg elgondolkozni, hogy annál lehet-e nagyobb
    this->x = { -4.050000000000000e+02, -4.042000000000000e+02, -4.034000000000000e+02, -4.026000000000000e+02, -4.018000000000000e+02, -4.009999999999999e+02, -4.001999999999999e+02, -3.993999999999999e+02, -3.985999999999999e+02, -3.977999999999999e+02, -3.969999999999999e+02, -3.961999999999999e+02, -3.953999999999999e+02, -3.945999999999999e+02, -3.937999999999998e+02, -3.929999999999998e+02, -3.921999999999998e+02, -3.913999999999998e+02, -3.905999999999998e+02, -3.897999999999998e+02, -3.889999999999998e+02, -3.881999999999998e+02, -3.873999999999997e+02, -3.865999999999997e+02, -3.857999999999997e+02, -3.849999999999997e+02, -3.841999999999997e+02, -3.833999999999997e+02, -3.825999999999997e+02, -3.817999999999997e+02, -3.809999999999997e+02, -3.801999999999996e+02, -3.793999999999996e+02, -3.785999999999996e+02, -3.777999999999996e+02, -3.769999999999996e+02, -3.761999999999996e+02, -3.753999999999996e+02, -3.745999999999996e+02, -3.737999999999996e+02, -3.729999999999995e+02, -3.721999999999995e+02, -3.713999999999995e+02, -3.705999999999995e+02, -3.697999999999995e+02, -3.689999999999995e+02, -3.681999999999995e+02, -3.673999999999995e+02, -3.665999999999995e+02, -3.657999999999994e+02, -3.649999999999994e+02, -3.641999999999994e+02, -3.633999999999994e+02, -3.625999999999994e+02, -3.617999999999994e+02, -3.609999999999994e+02, -3.601999999999994e+02, -3.593999999999994e+02, -3.585999999999993e+02, -3.577999999999993e+02, -3.569999999999993e+02, -3.561999999999993e+02, -3.553999999999993e+02, -3.545999999999993e+02, -3.537999999999993e+02, -3.529999999999993e+02, -3.521999999999992e+02, -3.513999999999992e+02, -3.505999999999992e+02, -3.497999999999992e+02, -3.489999999999992e+02, -3.481999999999992e+02, -3.473999999999992e+02, -3.465999999999992e+02, -3.457999999999992e+02, -3.449999999999991e+02, -3.441999999999991e+02, -3.433999999999991e+02, -3.425999999999991e+02, -3.417999999999991e+02, -3.409999999999991e+02, -3.401999999999991e+02, -3.393999999999991e+02, -3.385999999999991e+02, -3.377999999999990e+02, -3.369999999999990e+02, -3.361999999999990e+02, -3.353999999999990e+02, -3.345999999999990e+02, -3.337999999999990e+02, -3.329999999999990e+02, -3.321999999999990e+02, -3.313999999999990e+02, -3.305999999999989e+02, -3.297999999999989e+02, -3.289999999999989e+02, -3.281999999999989e+02, -3.273999999999989e+02, -3.265999999999989e+02, -3.257999999999989e+02, -3.249999999999989e+02, -3.241999999999989e+02, -3.233999999999988e+02, -3.225999999999988e+02, -3.217999999999988e+02, -3.209999999999988e+02, -3.201999999999988e+02, -3.193999999999988e+02, -3.185999999999988e+02, -3.177999999999988e+02, -3.169999999999987e+02, -3.161999999999987e+02, -3.153999999999987e+02, -3.145999999999987e+02, -3.137999999999987e+02, -3.129999999999987e+02, -3.121999999999987e+02, -3.113999999999987e+02, -3.105999999999987e+02, -3.097999999999986e+02, -3.089999999999986e+02, -3.081999999999986e+02, -3.073999999999986e+02, -3.065999999999986e+02, -3.057999999999986e+02, -3.049999999999986e+02, -3.041999999999986e+02, -3.033999999999986e+02, -3.025999999999985e+02, -3.017999999999985e+02, -3.009999999999985e+02, -3.001999999999985e+02, -2.993999999999985e+02, -2.985999999999985e+02, -2.977999999999985e+02, -2.969999999999985e+02, -2.961999999999985e+02, -2.953999999999984e+02, -2.945999999999984e+02, -2.937999999999984e+02, -2.929999999999984e+02, -2.921999999999984e+02, -2.913999999999984e+02, -2.905999999999984e+02, -2.897999999999984e+02, -2.889999999999984e+02, -2.881999999999983e+02, -2.873999999999983e+02, -2.865999999999983e+02, -2.857999999999983e+02, -2.849999999999983e+02, -2.841999999999983e+02, -2.833999999999983e+02, -2.825999999999983e+02, -2.817999999999982e+02, -2.809999999999982e+02, -2.801999999999982e+02, -2.793999999999982e+02, -2.785999999999982e+02, -2.777999999999982e+02, -2.769999999999982e+02, -2.761999999999982e+02, -2.753999999999982e+02, -2.745999999999981e+02, -2.737999999999981e+02, -2.729999999999981e+02, -2.721999999999981e+02, -2.713999999999981e+02, -2.705999999999981e+02, -2.697999999999981e+02, -2.689999999999981e+02, -2.681999999999981e+02, -2.673999999999980e+02, -2.665999999999980e+02, -2.657999999999980e+02, -2.649999999999980e+02, -2.641999999999980e+02, -2.633999999999980e+02, -2.625999999999980e+02, -2.617999999999980e+02, -2.609999999999980e+02, -2.601999999999979e+02, -2.593999999999979e+02, -2.585999999999979e+02, -2.577999999999979e+02, -2.569999999999979e+02, -2.561999999999979e+02, -2.553999999999979e+02, -2.545999999999979e+02, -2.537999999999979e+02, -2.529999999999978e+02, -2.521999999999978e+02, -2.513999999999978e+02, -2.505999999999978e+02, -2.497999999999978e+02, -2.489999999999978e+02, -2.481999999999978e+02, -2.473999999999978e+02, -2.465999999999977e+02, -2.457999999999977e+02, -2.449999999999977e+02, -2.441999999999977e+02, -2.433999999999977e+02, -2.425999999999977e+02, -2.417999999999977e+02, -2.409999999999977e+02, -2.401999999999977e+02, -2.393999999999976e+02, -2.385999999999976e+02, -2.377999999999976e+02, -2.369999999999976e+02, -2.361999999999976e+02, -2.353999999999976e+02, -2.345999999999976e+02, -2.337999999999976e+02, -2.329999999999976e+02, -2.321999999999975e+02, -2.313999999999975e+02, -2.305999999999975e+02, -2.297999999999975e+02, -2.289999999999975e+02, -2.281999999999975e+02, -2.273999999999975e+02, -2.265999999999975e+02, -2.257999999999975e+02, -2.249999999999974e+02, -2.241999999999974e+02, -2.233999999999974e+02, -2.225999999999974e+02, -2.217999999999974e+02, -2.209999999999974e+02, -2.201999999999974e+02, -2.193999999999974e+02, -2.185999999999974e+02, -2.177999999999973e+02, -2.169999999999973e+02, -2.161999999999973e+02, -2.153999999999973e+02, -2.145999999999973e+02, -2.137999999999973e+02, -2.129999999999973e+02, -2.121999999999973e+02, -2.113999999999972e+02, -2.105999999999972e+02, -2.097999999999972e+02, -2.089999999999972e+02, -2.081999999999972e+02, -2.073999999999972e+02, -2.065999999999972e+02, -2.057999999999972e+02, -2.049999999999972e+02, -2.041999999999971e+02, -2.033999999999971e+02, -2.025999999999971e+02, -2.017999999999971e+02, -2.009999999999971e+02, -2.001999999999971e+02, -1.993999999999971e+02, -1.985999999999971e+02, -1.977999999999971e+02, -1.969999999999970e+02, -1.961999999999970e+02, -1.953999999999970e+02, -1.945999999999970e+02, -1.937999999999970e+02, -1.929999999999970e+02, -1.921999999999970e+02, -1.913999999999970e+02, -1.905999999999970e+02, -1.897999999999969e+02, -1.889999999999969e+02, -1.881999999999969e+02, -1.873999999999969e+02, -1.865999999999969e+02, -1.857999999999969e+02, -1.849999999999969e+02, -1.841999999999969e+02, -1.833999999999969e+02, -1.825999999999968e+02, -1.817999999999968e+02, -1.809999999999968e+02, -1.801999999999968e+02, -1.793999999999968e+02, -1.785999999999968e+02, -1.777999999999968e+02, -1.769999999999968e+02, -1.761999999999967e+02, -1.753999999999967e+02, -1.745999999999967e+02, -1.737999999999967e+02, -1.729999999999967e+02, -1.721999999999967e+02, -1.713999999999967e+02, -1.705999999999967e+02, -1.697999999999967e+02, -1.689999999999966e+02, -1.681999999999966e+02, -1.673999999999966e+02, -1.665999999999966e+02, -1.657999999999966e+02, -1.649999999999966e+02, -1.641999999999966e+02, -1.633999999999966e+02, -1.625999999999966e+02, -1.617999999999965e+02, -1.609999999999965e+02, -1.601999999999965e+02, -1.593999999999965e+02, -1.585999999999965e+02, -1.577999999999965e+02, -1.569999999999965e+02, -1.561999999999965e+02, -1.553999999999965e+02, -1.545999999999964e+02, -1.537999999999964e+02, -1.529999999999964e+02, -1.521999999999964e+02, -1.513999999999964e+02, -1.505999999999964e+02, -1.497999999999964e+02, -1.489999999999964e+02, -1.481999999999964e+02, -1.473999999999963e+02, -1.465999999999963e+02, -1.457999999999963e+02, -1.449999999999963e+02, -1.441999999999963e+02, -1.433999999999963e+02, -1.425999999999963e+02, -1.417999999999963e+02, -1.409999999999962e+02, -1.401999999999962e+02, -1.393999999999962e+02, -1.385999999999962e+02, -1.377999999999962e+02, -1.369999999999962e+02, -1.361999999999962e+02, -1.353999999999962e+02, -1.345999999999962e+02, -1.337999999999961e+02, -1.329999999999961e+02, -1.321999999999961e+02, -1.313999999999961e+02, -1.305999999999961e+02, -1.297999999999961e+02, -1.289999999999961e+02, -1.281999999999961e+02, -1.273999999999961e+02, -1.265999999999961e+02, -1.257999999999961e+02, -1.249999999999961e+02, -1.241999999999961e+02, -1.233999999999961e+02, -1.225999999999961e+02, -1.217999999999961e+02, -1.209999999999961e+02, -1.201999999999961e+02, -1.193999999999961e+02, -1.185999999999961e+02, -1.177999999999961e+02, -1.169999999999961e+02, -1.161999999999961e+02, -1.153999999999961e+02, -1.145999999999961e+02, -1.137999999999961e+02, -1.129999999999961e+02, -1.121999999999961e+02, -1.113999999999961e+02, -1.105999999999961e+02, -1.097999999999961e+02, -1.089999999999961e+02, -1.081999999999961e+02, -1.073999999999961e+02, -1.065999999999961e+02, -1.057999999999961e+02, -1.049999999999961e+02, -1.041999999999962e+02, -1.033999999999962e+02, -1.025999999999962e+02, -1.017999999999962e+02, -1.009999999999962e+02, -1.001999999999962e+02, -9.939999999999617e+01, -9.859999999999617e+01, -9.779999999999617e+01, -9.699999999999618e+01, -9.619999999999618e+01, -9.539999999999618e+01, -9.459999999999619e+01, -9.379999999999619e+01, -9.299999999999619e+01, -9.219999999999619e+01, -9.139999999999620e+01, -9.059999999999620e+01, -8.979999999999620e+01, -8.899999999999621e+01, -8.819999999999621e+01, -8.739999999999621e+01, -8.659999999999621e+01, -8.579999999999622e+01, -8.499999999999622e+01, -8.419999999999622e+01, -8.339999999999623e+01, -8.259999999999623e+01, -8.179999999999623e+01, -8.099999999999623e+01, -8.019999999999624e+01, -7.939999999999624e+01, -7.859999999999624e+01, -7.779999999999625e+01, -7.699999999999625e+01, -7.619999999999625e+01, -7.539999999999625e+01, -7.459999999999626e+01, -7.379999999999626e+01, -7.299999999999626e+01, -7.219999999999627e+01, -7.139999999999627e+01, -7.059999999999627e+01, -6.979999999999627e+01, -6.899999999999628e+01, -6.819999999999628e+01, -6.739999999999628e+01, -6.659999999999629e+01, -6.579999999999629e+01, -6.499999999999629e+01, -6.419999999999629e+01, -6.339999999999630e+01, -6.259999999999630e+01, -6.179999999999630e+01, -6.099999999999631e+01, -6.019999999999631e+01, -5.939999999999631e+01, -5.859999999999631e+01, -5.779999999999632e+01, -5.699999999999632e+01, -5.619999999999632e+01, -5.539999999999633e+01, -5.459999999999633e+01, -5.379999999999633e+01, -5.299999999999633e+01, -5.219999999999634e+01, -5.139999999999634e+01, -5.059999999999634e+01, -4.979999999999634e+01, -4.899999999999635e+01, -4.819999999999635e+01, -4.739999999999635e+01, -4.659999999999636e+01, -4.579999999999636e+01, -4.499999999999636e+01, -4.419999999999636e+01, -4.339999999999637e+01, -4.259999999999637e+01, -4.179999999999637e+01, -4.099999999999638e+01, -4.019999999999638e+01, -3.939999999999638e+01, -3.859999999999638e+01, -3.779999999999639e+01, -3.699999999999639e+01, -3.619999999999639e+01, -3.539999999999640e+01, -3.459999999999640e+01, -3.379999999999640e+01, -3.299999999999640e+01, -3.219999999999641e+01, -3.139999999999641e+01, -3.059999999999641e+01, -2.979999999999641e+01, -2.899999999999640e+01, -2.819999999999640e+01, -2.739999999999640e+01, -2.659999999999640e+01, -2.579999999999640e+01, -2.499999999999640e+01, -2.419999999999640e+01, -2.339999999999640e+01, -2.259999999999640e+01, -2.179999999999640e+01, -2.099999999999640e+01, -2.019999999999640e+01, -1.939999999999640e+01, -1.859999999999640e+01, -1.779999999999639e+01, -1.699999999999639e+01, -1.619999999999639e+01, -1.539999999999639e+01, -1.459999999999639e+01, -1.379999999999639e+01, -1.299999999999639e+01, -1.219999999999639e+01, -1.139999999999639e+01, -1.059999999999639e+01, -9.799999999996388e+00, -8.999999999996387e+00, -8.199999999996386e+00, -7.399999999996386e+00, -6.599999999996387e+00, -5.799999999996387e+00, -4.999999999996387e+00, -4.199999999996387e+00, -3.399999999996387e+00, -2.599999999996387e+00, -1.799999999996387e+00, -9.999999999963873e-01, -1.999999999963873e-01, 6.000000000036128e-01, 1.400000000003613e+00, 2.200000000003613e+00, 3.000000000003613e+00, 3.800000000003613e+00, 4.600000000003613e+00, 5.400000000003613e+00, 6.200000000003612e+00, 7.000000000003612e+00, 7.800000000003612e+00, 8.600000000003613e+00, 9.400000000003613e+00, 1.020000000000361e+01, 1.100000000000361e+01, 1.180000000000362e+01, 1.260000000000362e+01, 1.340000000000362e+01, 1.420000000000362e+01, 1.500000000000362e+01, 1.580000000000362e+01, 1.660000000000362e+01, 1.740000000000362e+01, 1.820000000000362e+01, 1.900000000000362e+01, 1.980000000000362e+01, 2.060000000000362e+01, 2.140000000000362e+01, 2.220000000000362e+01, 2.300000000000362e+01, 2.380000000000362e+01, 2.460000000000363e+01, 2.540000000000363e+01, 2.620000000000363e+01, 2.700000000000363e+01, 2.780000000000363e+01, 2.860000000000363e+01, 2.940000000000363e+01, 3.020000000000363e+01, 3.100000000000363e+01, 3.180000000000363e+01, 3.260000000000363e+01, 3.340000000000363e+01, 3.420000000000363e+01, 3.500000000000362e+01, 3.580000000000362e+01, 3.660000000000362e+01, 3.740000000000362e+01, 3.820000000000361e+01, 3.900000000000361e+01, 3.980000000000361e+01, 4.060000000000360e+01, 4.140000000000360e+01, 4.220000000000360e+01, 4.300000000000360e+01, 4.380000000000359e+01, 4.460000000000359e+01, 4.540000000000359e+01, 4.620000000000358e+01, 4.700000000000358e+01, 4.780000000000358e+01, 4.860000000000358e+01, 4.940000000000357e+01, 5.020000000000357e+01, 5.100000000000357e+01, 5.180000000000356e+01, 5.260000000000356e+01, 5.340000000000356e+01, 5.420000000000356e+01, 5.500000000000355e+01, 5.580000000000355e+01, 5.660000000000355e+01, 5.740000000000354e+01, 5.820000000000354e+01, 5.900000000000354e+01, 5.980000000000354e+01, 6.060000000000353e+01, 6.140000000000353e+01, 6.220000000000353e+01, 6.300000000000352e+01, 6.380000000000352e+01, 6.460000000000352e+01, 6.540000000000352e+01, 6.620000000000351e+01, 6.700000000000351e+01, 6.780000000000351e+01, 6.860000000000350e+01, 6.940000000000350e+01, 7.020000000000350e+01, 7.100000000000350e+01, 7.180000000000349e+01, 7.260000000000349e+01, 7.340000000000349e+01, 7.420000000000348e+01, 7.500000000000348e+01, 7.580000000000348e+01, 7.660000000000348e+01, 7.740000000000347e+01, 7.820000000000347e+01, 7.900000000000347e+01, 7.980000000000346e+01, 8.060000000000346e+01, 8.140000000000346e+01, 8.220000000000346e+01, 8.300000000000345e+01, 8.380000000000345e+01, 8.460000000000345e+01, 8.540000000000344e+01, 8.620000000000344e+01, 8.700000000000344e+01, 8.780000000000344e+01, 8.860000000000343e+01, 8.940000000000343e+01, 9.020000000000343e+01, 9.100000000000342e+01, 9.180000000000342e+01, 9.260000000000342e+01, 9.340000000000342e+01, 9.420000000000341e+01, 9.500000000000341e+01, 9.580000000000341e+01, 9.660000000000340e+01, 9.740000000000340e+01, 9.820000000000340e+01, 9.900000000000340e+01, 9.980000000000339e+01, 1.006000000000034e+02, 1.014000000000034e+02, 1.022000000000034e+02, 1.030000000000034e+02, 1.038000000000034e+02, 1.046000000000034e+02, 1.054000000000034e+02, 1.062000000000034e+02, 1.070000000000034e+02, 1.078000000000034e+02, 1.086000000000034e+02, 1.094000000000034e+02, 1.102000000000034e+02, 1.110000000000034e+02, 1.118000000000034e+02, 1.126000000000033e+02, 1.134000000000033e+02, 1.142000000000033e+02, 1.150000000000033e+02, 1.158000000000033e+02, 1.166000000000033e+02, 1.174000000000033e+02, 1.182000000000033e+02, 1.190000000000033e+02, 1.198000000000033e+02, 1.206000000000033e+02, 1.214000000000033e+02, 1.222000000000033e+02, 1.230000000000033e+02, 1.238000000000033e+02, 1.246000000000033e+02, 1.254000000000033e+02, 1.262000000000033e+02, 1.270000000000033e+02, 1.278000000000033e+02, 1.286000000000033e+02, 1.294000000000033e+02, 1.302000000000033e+02, 1.310000000000033e+02, 1.318000000000033e+02, 1.326000000000033e+02, 1.334000000000034e+02, 1.342000000000034e+02, 1.350000000000034e+02, 1.358000000000034e+02, 1.366000000000034e+02, 1.374000000000034e+02, 1.382000000000034e+02, 1.390000000000034e+02, 1.398000000000035e+02, 1.406000000000035e+02, 1.414000000000035e+02, 1.422000000000035e+02, 1.430000000000035e+02, 1.438000000000035e+02, 1.446000000000035e+02, 1.454000000000035e+02, 1.462000000000035e+02, 1.470000000000036e+02, 1.478000000000036e+02, 1.486000000000036e+02, 1.494000000000036e+02, 1.502000000000036e+02, 1.510000000000036e+02, 1.518000000000036e+02, 1.526000000000036e+02, 1.534000000000036e+02, 1.542000000000037e+02, 1.550000000000037e+02, 1.558000000000037e+02, 1.566000000000037e+02, 1.574000000000037e+02, 1.582000000000037e+02, 1.590000000000037e+02, 1.598000000000037e+02, 1.606000000000037e+02, 1.614000000000038e+02, 1.622000000000038e+02, 1.630000000000038e+02, 1.638000000000038e+02, 1.646000000000038e+02, 1.654000000000038e+02, 1.662000000000038e+02, 1.670000000000038e+02, 1.678000000000038e+02, 1.686000000000039e+02, 1.694000000000039e+02, 1.702000000000039e+02, 1.710000000000039e+02, 1.718000000000039e+02, 1.726000000000039e+02, 1.734000000000039e+02, 1.742000000000039e+02, 1.750000000000040e+02, 1.758000000000040e+02, 1.766000000000040e+02, 1.774000000000040e+02, 1.782000000000040e+02, 1.790000000000040e+02, 1.798000000000040e+02, 1.806000000000040e+02, 1.814000000000040e+02, 1.822000000000041e+02, 1.830000000000041e+02, 1.838000000000041e+02, 1.846000000000041e+02, 1.854000000000041e+02, 1.862000000000041e+02, 1.870000000000041e+02, 1.878000000000041e+02, 1.886000000000041e+02, 1.894000000000042e+02, 1.902000000000042e+02, 1.910000000000042e+02, 1.918000000000042e+02, 1.926000000000042e+02, 1.934000000000042e+02, 1.942000000000042e+02, 1.950000000000042e+02, 1.958000000000042e+02, 1.966000000000043e+02, 1.974000000000043e+02, 1.982000000000043e+02, 1.990000000000043e+02, 1.998000000000043e+02, 2.006000000000043e+02, 2.014000000000043e+02, 2.022000000000043e+02, 2.030000000000043e+02, 2.038000000000044e+02, 2.046000000000044e+02, 2.054000000000044e+02, 2.062000000000044e+02, 2.070000000000044e+02, 2.078000000000044e+02, 2.086000000000044e+02, 2.094000000000044e+02, 2.102000000000045e+02, 2.110000000000045e+02, 2.118000000000045e+02, 2.126000000000045e+02, 2.134000000000045e+02, 2.142000000000045e+02, 2.150000000000045e+02, 2.158000000000045e+02, 2.166000000000045e+02, 2.174000000000046e+02, 2.182000000000046e+02, 2.190000000000046e+02, 2.198000000000046e+02, 2.206000000000046e+02, 2.214000000000046e+02, 2.222000000000046e+02, 2.230000000000046e+02, 2.238000000000046e+02, 2.246000000000047e+02, 2.254000000000047e+02, 2.262000000000047e+02, 2.270000000000047e+02, 2.278000000000047e+02, 2.286000000000047e+02, 2.294000000000047e+02, 2.302000000000047e+02, 2.310000000000047e+02, 2.318000000000048e+02, 2.326000000000048e+02, 2.334000000000048e+02, 2.342000000000048e+02, 2.350000000000048e+02, 2.358000000000048e+02, 2.366000000000048e+02, 2.374000000000048e+02, 2.382000000000048e+02, 2.390000000000049e+02, 2.398000000000049e+02, 2.406000000000049e+02, 2.414000000000049e+02, 2.422000000000049e+02, 2.430000000000049e+02, 2.438000000000049e+02, 2.446000000000049e+02, 2.454000000000050e+02, 2.462000000000050e+02, 2.470000000000050e+02, 2.478000000000050e+02, 2.486000000000050e+02, 2.494000000000050e+02, 2.502000000000050e+02, 2.510000000000050e+02, 2.518000000000050e+02, 2.526000000000051e+02, 2.534000000000051e+02, 2.542000000000051e+02, 2.550000000000051e+02, 2.558000000000051e+02, 2.566000000000051e+02, 2.574000000000051e+02, 2.582000000000051e+02, 2.590000000000051e+02, 2.598000000000051e+02, 2.606000000000051e+02, 2.614000000000052e+02, 2.622000000000052e+02, 2.630000000000052e+02, 2.638000000000052e+02, 2.646000000000052e+02, 2.654000000000052e+02, 2.662000000000052e+02, 2.670000000000052e+02, 2.678000000000052e+02, 2.686000000000053e+02, 2.694000000000053e+02, 2.702000000000053e+02, 2.710000000000053e+02, 2.718000000000053e+02, 2.726000000000053e+02, 2.734000000000053e+02, 2.742000000000053e+02, 2.750000000000053e+02, 2.758000000000054e+02, 2.766000000000054e+02, 2.774000000000054e+02, 2.782000000000054e+02, 2.790000000000054e+02, 2.798000000000054e+02, 2.806000000000054e+02, 2.814000000000054e+02, 2.822000000000054e+02, 2.830000000000055e+02, 2.838000000000055e+02, 2.846000000000055e+02, 2.854000000000055e+02, 2.862000000000055e+02, 2.870000000000055e+02, 2.878000000000055e+02, 2.886000000000055e+02, 2.894000000000055e+02, 2.902000000000056e+02, 2.910000000000056e+02, 2.918000000000056e+02, 2.926000000000056e+02, 2.934000000000056e+02, 2.942000000000056e+02, 2.950000000000056e+02, 2.958000000000056e+02, 2.966000000000057e+02, 2.974000000000057e+02, 2.982000000000057e+02, 2.990000000000057e+02, 2.998000000000057e+02, 3.006000000000057e+02, 3.014000000000057e+02, 3.022000000000057e+02, 3.030000000000057e+02, 3.038000000000058e+02, 3.046000000000058e+02, 3.054000000000058e+02, 3.062000000000058e+02, 3.070000000000058e+02, 3.078000000000058e+02, 3.086000000000058e+02, 3.094000000000058e+02, 3.102000000000058e+02, 3.110000000000059e+02, 3.118000000000059e+02, 3.126000000000059e+02, 3.134000000000059e+02, 3.142000000000059e+02, 3.150000000000059e+02, 3.158000000000059e+02, 3.166000000000059e+02, 3.174000000000059e+02, 3.182000000000060e+02, 3.190000000000060e+02, 3.198000000000060e+02, 3.206000000000060e+02, 3.214000000000060e+02, 3.222000000000060e+02, 3.230000000000060e+02, 3.238000000000060e+02, 3.246000000000060e+02, 3.254000000000061e+02, 3.262000000000061e+02, 3.270000000000061e+02, 3.278000000000061e+02, 3.286000000000061e+02, 3.294000000000061e+02, 3.302000000000061e+02, 3.310000000000061e+02, 3.318000000000062e+02, 3.326000000000062e+02, 3.334000000000062e+02, 3.342000000000062e+02, 3.350000000000062e+02, 3.358000000000062e+02, 3.366000000000062e+02, 3.374000000000062e+02, 3.382000000000062e+02, 3.390000000000063e+02, 3.398000000000063e+02, 3.406000000000063e+02, 3.414000000000063e+02, 3.422000000000063e+02, 3.430000000000063e+02, 3.438000000000063e+02, 3.446000000000063e+02, 3.454000000000063e+02, 3.462000000000064e+02, 3.470000000000064e+02, 3.478000000000064e+02, 3.486000000000064e+02, 3.494000000000064e+02, 3.502000000000064e+02, 3.510000000000064e+02, 3.518000000000064e+02, 3.526000000000064e+02, 3.534000000000065e+02, 3.542000000000065e+02, 3.550000000000065e+02, 3.558000000000065e+02, 3.566000000000065e+02, 3.574000000000065e+02, 3.582000000000065e+02, 3.590000000000065e+02, 3.598000000000065e+02, 3.606000000000066e+02, 3.614000000000066e+02, 3.622000000000066e+02, 3.630000000000066e+02, 3.638000000000066e+02, 3.646000000000066e+02, 3.654000000000066e+02, 3.662000000000066e+02, 3.670000000000067e+02, 3.678000000000067e+02, 3.686000000000067e+02, 3.694000000000067e+02, 3.702000000000067e+02, 3.710000000000067e+02, 3.718000000000067e+02, 3.726000000000067e+02, 3.734000000000067e+02, 3.742000000000068e+02, 3.750000000000068e+02, 3.758000000000068e+02, 3.766000000000068e+02, 3.774000000000068e+02, 3.782000000000068e+02, 3.790000000000068e+02, 3.798000000000068e+02, 3.806000000000068e+02, 3.814000000000069e+02, 3.822000000000069e+02, 3.830000000000069e+02, 3.838000000000069e+02, 3.846000000000069e+02, 3.854000000000069e+02, 3.862000000000069e+02, 3.870000000000069e+02, 3.878000000000069e+02, 3.886000000000070e+02, 3.894000000000070e+02, 3.902000000000070e+02, 3.910000000000070e+02, 3.918000000000070e+02, 3.926000000000070e+02, 3.934000000000070e+02, 3.942000000000070e+02, 3.950000000000070e+02, 3.958000000000071e+02, 3.966000000000071e+02, 3.974000000000071e+02, 3.982000000000071e+02, 3.990000000000071e+02, 3.998000000000071e+02, 4.006000000000071e+02, 4.014000000000071e+02, 4.022000000000072e+02, 4.030000000000072e+02, 4.038000000000072e+02, 4.046000000000072e+02, 4.050000000000000e+02};
    this->y = { -1.496680954741403e-01, -1.493718947050710e-01, -1.490756940677760e-01, -1.487794934638188e-01, -1.484832929263620e-01, -1.481870924556719e-01, -1.478908920520155e-01, -1.475946917156614e-01, -1.472984914468801e-01, -1.470022912459436e-01, -1.467060911131255e-01, -1.464098910487010e-01, -1.461136910529472e-01, -1.458174911261428e-01, -1.455212912685679e-01, -1.452250914805048e-01, -1.449288917622372e-01, -1.446326921140506e-01, -1.443364925362323e-01, -1.440402930290715e-01, -1.437440935928588e-01, -1.434478942278871e-01, -1.431516949344507e-01, -1.428554957128458e-01, -1.425592965633708e-01, -1.422630974863255e-01, -1.419668984820117e-01, -1.416706995507334e-01, -1.413745006927961e-01, -1.410783019085073e-01, -1.407821031981767e-01, -1.404859045621158e-01, -1.401897060006379e-01, -1.398935075140585e-01, -1.395973091026951e-01, -1.393011107668671e-01, -1.390049125068961e-01, -1.387087143231055e-01, -1.384125162158211e-01, -1.381163181853706e-01, -1.378201202320838e-01, -1.375239223562927e-01, -1.372277245583313e-01, -1.369315268385361e-01, -1.366353291972455e-01, -1.363391316348000e-01, -1.360429341515427e-01, -1.357467367478187e-01, -1.354505394239753e-01, -1.351543421803622e-01, -1.348581450173315e-01, -1.345619479352373e-01, -1.342657509344364e-01, -1.339695540152878e-01, -1.336733571781528e-01, -1.333771604233952e-01, -1.330809637513812e-01, -1.327847671624796e-01, -1.324885706570614e-01, -1.321923742355003e-01, -1.318961778981724e-01, -1.315999816454564e-01, -1.313037854777334e-01, -1.310075893953875e-01, -1.307113933988048e-01, -1.304151974883746e-01, -1.301190016644884e-01, -1.298228059275408e-01, -1.295266102779287e-01, -1.292304147160521e-01, -1.289342192423134e-01, -1.286380238571179e-01, -1.283418285608739e-01, -1.280456333539922e-01, -1.277494382368868e-01, -1.274532432099743e-01, -1.271570482736744e-01, -1.268608534284095e-01, -1.265646586746052e-01, -1.262684640126900e-01, -1.259722694430955e-01, -1.256760749662561e-01, -1.253798805826095e-01, -1.250836862925965e-01, -1.247874920966609e-01, -1.244912979952499e-01, -1.241951039888135e-01, -1.238989100778054e-01, -1.236027162626821e-01, -1.233065225439038e-01, -1.230103289219337e-01, -1.227141353972385e-01, -1.224179419702882e-01, -1.221217486415564e-01, -1.218255554115199e-01, -1.215293622806592e-01, -1.212331692494581e-01, -1.209369763184041e-01, -1.206407834879884e-01, -1.203445907587054e-01, -1.200483981310536e-01, -1.197522056055351e-01, -1.194560131826554e-01, -1.191598208629242e-01, -1.188636286468548e-01, -1.185674365349643e-01, -1.182712445277738e-01, -1.179750526258081e-01, -1.176788608295964e-01, -1.173826691396713e-01, -1.170864775565700e-01, -1.167902860808334e-01, -1.164940947130067e-01, -1.161979034536391e-01, -1.159017123032842e-01, -1.156055212624999e-01, -1.153093303318480e-01, -1.150131395118951e-01, -1.147169488032118e-01, -1.144207582063735e-01, -1.141245677219597e-01, -1.138283773505546e-01, -1.135321870927470e-01, -1.132359969491303e-01, -1.129398069203024e-01, -1.126436170068662e-01, -1.123474272094291e-01, -1.120512375286034e-01, -1.117550479650063e-01, -1.114588585192599e-01, -1.111626691919912e-01, -1.108664799838322e-01, -1.105702908954201e-01, -1.102741019273972e-01, -1.099779130804109e-01, -1.096817243551138e-01, -1.093855357521640e-01, -1.090893472722247e-01, -1.087931589159647e-01, -1.084969706840582e-01, -1.082007825771848e-01, -1.079045945960300e-01, -1.076084067412846e-01, -1.073122190136454e-01, -1.070160314138147e-01, -1.067198439425009e-01, -1.064236566004182e-01, -1.061274693882867e-01, -1.058312823068325e-01, -1.055350953567881e-01, -1.052389085388919e-01, -1.049427218538885e-01, -1.046465353025291e-01, -1.043503488855710e-01, -1.040541626037780e-01, -1.037579764579207e-01, -1.034617904487759e-01, -1.031656045771275e-01, -1.028694188437657e-01, -1.025732332494879e-01, -1.022770477950983e-01, -1.019808624814081e-01, -1.016846773092355e-01, -1.013884922794059e-01, -1.010923073927521e-01, -1.007961226501139e-01, -1.004999380523388e-01, -1.002037536002817e-01, -9.990756929480513e-02, -9.961138513677920e-02, -9.931520112708188e-02, -9.901901726659898e-02, -9.872283355622424e-02, -9.842664999685953e-02, -9.813046658941478e-02, -9.783428333480822e-02, -9.753810023396643e-02, -9.724191728782443e-02, -9.694573449732580e-02, -9.664955186342274e-02, -9.635336938707628e-02, -9.605718706925628e-02, -9.576100491094162e-02, -9.546482291312021e-02, -9.516864107678921e-02, -9.487245940295515e-02, -9.457627789263388e-02, -9.428009654685089e-02, -9.398391536664136e-02, -9.368773435305018e-02, -9.339155350713227e-02, -9.309537282995252e-02, -9.279919232258603e-02, -9.250301198611820e-02, -9.220683182164488e-02, -9.191065183027247e-02, -9.161447201311812e-02, -9.131829237130978e-02, -9.102211290598643e-02, -9.072593361829814e-02, -9.042975450940631e-02, -9.013357558048372e-02, -8.983739683271474e-02, -8.954121826729552e-02, -8.924503988543400e-02, -8.894886168835024e-02, -8.865268367727648e-02, -8.835650585345731e-02, -8.806032821814985e-02, -8.776415077262398e-02, -8.746797351816238e-02, -8.717179645606082e-02, -8.687561958762828e-02, -8.657944291418715e-02, -8.628326643707342e-02, -8.598709015763681e-02, -8.569091407724108e-02, -8.539473819726412e-02, -8.509856251909813e-02, -8.480238704414993e-02, -8.450621177384109e-02, -8.421003670960808e-02, -8.391386185290267e-02, -8.361768720519190e-02, -8.332151276795852e-02, -8.302533854270104e-02, -8.272916453093405e-02, -8.243299073418849e-02, -8.213681715401172e-02, -8.184064379196795e-02, -8.154447064963836e-02, -8.124829772862138e-02, -8.095212503053295e-02, -8.065595255700680e-02, -8.035978030969464e-02, -8.006360829026649e-02, -7.976743650041090e-02, -7.947126494183535e-02, -7.917509361626633e-02, -7.887892252544978e-02, -7.858275167115135e-02, -7.828658105515666e-02, -7.799041067927162e-02, -7.769424054532278e-02, -7.739807065515758e-02, -7.710190101064471e-02, -7.680573161367442e-02, -7.650956246615889e-02, -7.621339357003248e-02, -7.591722492725222e-02, -7.562105653979799e-02, -7.532488840967304e-02, -7.502872053890425e-02, -7.473255292954255e-02, -7.443638558366328e-02, -7.414021850336662e-02, -7.384405169077794e-02, -7.354788514804822e-02, -7.325171887735449e-02, -7.295555288090017e-02, -7.265938716091562e-02, -7.236322171965849e-02, -7.206705655941423e-02, -7.177089168249645e-02, -7.147472709124750e-02, -7.117856278803887e-02, -7.088239877527172e-02, -7.058623505537734e-02, -7.029007163081767e-02, -6.999390850408585e-02, -6.969774567770672e-02, -6.940158315423731e-02, -6.910542093626751e-02, -6.880925902642049e-02, -6.851309742735344e-02, -6.821693614175797e-02, -6.792077517236091e-02, -6.762461452192473e-02, -6.732845419324829e-02, -6.703229418916748e-02, -6.673613451255581e-02, -6.643997516632512e-02, -6.614381615342627e-02, -6.584765747684979e-02, -6.555149913962670e-02, -6.525534114482913e-02, -6.495918349557110e-02, -6.466302619500935e-02, -6.436686924634404e-02, -6.407071265281955e-02, -6.377455641772542e-02, -6.347840054439702e-02, -6.318224503621656e-02, -6.288608989661382e-02, -6.258993512906719e-02, -6.229378073710450e-02, -6.199762672430400e-02, -6.170147309429534e-02, -6.140531985076048e-02, -6.110916699743481e-02, -6.081301453810808e-02, -6.051686247662558e-02, -6.022071081688910e-02, -5.992455956285814e-02, -5.962840871855102e-02, -5.933225828804604e-02, -5.903610827548271e-02, -5.873995868506292e-02, -5.844380952105229e-02, -5.814766078778139e-02, -5.785151248964709e-02, -5.755536463111394e-02, -5.725921721671552e-02, -5.696307025105593e-02, -5.666692373881122e-02, -5.637077768473087e-02, -5.607463209363942e-02, -5.577848697043799e-02, -5.548234232010591e-02, -5.518619814770246e-02, -5.489005445836850e-02, -5.459391125732831e-02, -5.429776854989132e-02, -5.400162634145409e-02, -5.370548463750211e-02, -5.340934344361183e-02, -5.311320276545266e-02, -5.281706260878906e-02, -5.252092297948267e-02, -5.222478388349448e-02, -5.192864532688717e-02, -5.163250731582731e-02, -5.133636985658787e-02, -5.104023295555059e-02, -5.074409661920860e-02, -5.044796085416893e-02, -5.015182566715524e-02, -4.985569106501058e-02, -4.955955705470024e-02, -4.926342364331465e-02, -4.896729083807245e-02, -4.867115864632350e-02, -4.837502707555218e-02, -4.807889613338068e-02, -4.778276582757233e-02, -4.748663616603518e-02, -4.719050715682558e-02, -4.689437880815195e-02, -4.659825112837857e-02, -4.630212412602962e-02, -4.600599780979323e-02, -4.570987218852574e-02, -4.541374727125604e-02, -4.511762306719013e-02, -4.482149958571573e-02, -4.452537683640712e-02, -4.422925482903013e-02, -4.393313357354725e-02, -4.363701308012297e-02, -4.334089335912926e-02, -4.304477442115127e-02, -4.274865627699322e-02, -4.245253893768445e-02, -4.215642241448576e-02, -4.186030671889589e-02, -4.156419186265831e-02, -4.126807785776820e-02, -4.097196471647968e-02, -4.067585245131333e-02, -4.037974107506396e-02, -4.008363060080870e-02, -3.978752104191533e-02, -3.949141241205101e-02, -3.919530472519123e-02, -3.889919799562918e-02, -3.860309223798544e-02, -3.830698746721810e-02, -3.801088369863315e-02, -3.771478094789542e-02, -3.741867923103984e-02, -3.712257856448323e-02, -3.682647896503648e-02, -3.653038044991731e-02, -3.623428303676344e-02, -3.593818674364641e-02, -3.564209158908593e-02, -3.534599759206478e-02, -3.504990477204440e-02, -3.475381314898111e-02, -3.445772274334306e-02, -3.416163357612782e-02, -3.386554566888084e-02, -3.356945904371470e-02, -3.327337372332912e-02, -3.297728973103198e-02, -3.268120709076120e-02, -3.238512582710771e-02, -3.208904596533936e-02, -3.179296753142602e-02, -3.149689055206579e-02, -3.120081505471255e-02, -3.090474106760469e-02, -3.060866861979530e-02, -3.031259774118385e-02, -3.001652846254930e-02, -2.972046081558502e-02, -2.942439483293532e-02, -2.912833054823387e-02, -2.883226799614411e-02, -2.853620721240169e-02, -2.824014823385915e-02, -2.794409109853297e-02, -2.764803584565307e-02, -2.735198251571499e-02, -2.705593115053498e-02, -2.675988179330796e-02, -2.646383448866888e-02, -2.616778928275738e-02, -2.587174622328621e-02, -2.557570535961351e-02, -2.527966674281942e-02, -2.498363042578701e-02, -2.468759646328821e-02, -2.439156491207476e-02, -2.409553583097484e-02, -2.379950928099557e-02, -2.350348532543194e-02, -2.320746402998265e-02, -2.291144546287333e-02, -2.261542969498785e-02, -2.231941680000815e-02, -2.202340685456348e-02, -2.172739993838966e-02, -2.143139613449928e-02, -2.113539552936372e-02, -2.083939821310797e-02, -2.054340427971934e-02, -2.024741382727130e-02, -1.995142695816383e-02, -1.965544377938161e-02, -1.935946440277179e-02, -1.906348894534318e-02, -1.876751752958872e-02, -1.847155028383354e-02, -1.817558734261114e-02, -1.787962884707032e-02, -1.758367494541603e-02, -1.728772579338756e-02, -1.699178155477793e-02, -1.669584240199879e-02, -1.639990851669575e-02, -1.610398009041959e-02, -1.580805732535962e-02, -1.551214043514609e-02, -1.521622964572979e-02, -1.492032519634774e-02, -1.462442734058542e-02, -1.432853634754726e-02, -1.403265250314897e-02, -1.373677611154719e-02, -1.344090749672445e-02, -1.314504700424992e-02, -1.284919500324019e-02, -1.255335188854770e-02, -1.225751808320934e-02, -1.196169404119338e-02, -1.166588025048931e-02, -1.137007723659317e-02, -1.107428556645095e-02, -1.077850585293395e-02, -1.048273875993485e-02, -1.018698500819049e-02, -9.891245381959452e-03, -9.595520736709558e-03, -9.299812008004164e-03, -9.004120221818793e-03, -8.708446506573439e-03, -8.412792107234649e-03, -8.117158401929675e-03, -7.821546921629320e-03, -7.525959373605551e-03, -7.230397669566803e-03, -6.934863959636450e-03, -6.639360673693110e-03, -6.343890572072654e-03, -6.048456808295419e-03, -5.753063007409747e-03, -5.457713364859109e-03, -5.162412772677530e-03, -4.867166982602525e-03, -4.571982819861528e-03, -4.276868467759008e-03, -3.981834042429557e-03, -3.686891430774275e-03, -3.392056019240375e-03, -3.097347175485510e-03, -2.802790029151893e-03, -2.508418006716859e-03, -2.214276931546639e-03, -1.920432011881023e-03, -1.626980557387856e-03, -1.334077165010073e-03, -1.041989635407339e-03, -7.512452375233300e-04, -4.631282717441738e-04, -1.825188771004392e-04, -2.054851115901621e-07, 5.464003897480994e-05, 3.211541336676244e-04, 6.067136782089492e-04, 8.963980839388998e-04, 1.187907432951332e-03, 1.480447260389213e-03, 1.773649209852935e-03, 2.067312330619403e-03, 2.361315090049284e-03, 2.655578367125702e-03, 2.950047783561657e-03, 3.244684364958391e-03, 3.539459227089668e-03, 3.834350371025932e-03, 4.129340656774829e-03, 4.424416471095084e-03, 4.719566657742870e-03, 5.014782580096944e-03, 5.310056564357588e-03, 5.605382351183815e-03, 5.900754643755878e-03, 6.196168916873412e-03, 6.491621274639182e-03, 6.787108339031632e-03, 7.082627162064708e-03, 7.378175155805390e-03, 7.673750036063716e-03, 7.969349776671847e-03, 8.264972572050302e-03, 8.560616806322580e-03, 8.856281027650513e-03, 9.151963926766296e-03, 9.447664318904094e-03, 9.743381128505157e-03, 1.003911337620100e-02, 1.033486016767926e-02, 1.063062068411487e-02, 1.092639417390964e-02, 1.122217994553132e-02, 1.151797736128130e-02, 1.181378583184985e-02, 1.210960481154264e-02, 1.240543379408159e-02, 1.270127230889907e-02, 1.299711991785748e-02, 1.329297621233704e-02, 1.358884081064316e-02, 1.388471335569235e-02, 1.418059351294140e-02, 1.447648096852988e-02, 1.477237542761003e-02, 1.506827661284191e-02, 1.536418426303450e-02, 1.566009813191607e-02, 1.595601798701947e-02, 1.625194360866947e-02, 1.654787478906142e-02, 1.684381133142125e-02, 1.713975304923851e-02, 1.743569976556496e-02, 1.773165131237204e-02, 1.802760752996132e-02, 1.832356826642303e-02, 1.861953337713770e-02, 1.891550272431718e-02, 1.921147617658105e-02, 1.950745360856555e-02, 1.980343490056170e-02, 2.009941993818035e-02, 2.039540861204164e-02, 2.069140081748673e-02, 2.098739645431004e-02, 2.128339542651017e-02, 2.157939764205800e-02, 2.187540301268058e-02, 2.217141145365946e-02, 2.246742288364243e-02, 2.276343722446754e-02, 2.305945440099847e-02, 2.335547434097038e-02, 2.365149697484548e-02, 2.394752223567747e-02, 2.424355005898447e-02, 2.453958038262945e-02, 2.483561314670798e-02, 2.513164829344255e-02, 2.542768576708303e-02, 2.572372551381298e-02, 2.601976748166121e-02, 2.631581162041844e-02, 2.661185788155851e-02, 2.690790621816403e-02, 2.720395658485601e-02, 2.750000893772740e-02, 2.779606323428005e-02, 2.809211943336515e-02, 2.838817749512666e-02, 2.868423738094774e-02, 2.898029905339992e-02, 2.927636247619481e-02, 2.957242761413833e-02, 2.986849443308710e-02, 3.016456289990705e-02, 3.046063298243402e-02, 3.075670464943633e-02, 3.105277787057898e-02, 3.134885261638978e-02, 3.164492885822680e-02, 3.194100656824765e-02, 3.223708571937983e-02, 3.253316628529270e-02, 3.282924824037062e-02, 3.312533155968725e-02, 3.342141621898112e-02, 3.371750219463211e-02, 3.401358946363911e-02, 3.430967800359852e-02, 3.460576779268381e-02, 3.490185880962579e-02, 3.519795103369387e-02, 3.549404444467797e-02, 3.579013902287129e-02, 3.608623474905370e-02, 3.638233160447585e-02, 3.667842957084397e-02, 3.697452863030518e-02, 3.727062876543342e-02, 3.756672995921603e-02, 3.786283219504072e-02, 3.815893545668310e-02, 3.845503972829473e-02, 3.875114499439160e-02, 3.904725123984299e-02, 3.934335844986084e-02, 3.963946660998953e-02, 3.993557570609588e-02, 4.023168572435972e-02, 4.052779665126469e-02, 4.082390847358941e-02, 4.112002117839892e-02, 4.141613475303652e-02, 4.171224918511581e-02, 4.200836446251308e-02, 4.230448057335988e-02, 4.260059750603597e-02, 4.289671524916239e-02, 4.319283379159490e-02, 4.348895312241748e-02, 4.378507323093619e-02, 4.408119410667320e-02, 4.437731573936098e-02, 4.467343811893670e-02, 4.496956123553687e-02, 4.526568507949207e-02, 4.556180964132189e-02, 4.585793491173008e-02, 4.615406088159978e-02, 4.645018754198890e-02, 4.674631488412576e-02, 4.704244289940471e-02, 4.733857157938205e-02, 4.763470091577190e-02, 4.793083090044236e-02, 4.822696152541169e-02, 4.852309278284463e-02, 4.881922466504885e-02, 4.911535716447151e-02, 4.941149027369588e-02, 4.970762398543810e-02, 5.000375829254403e-02, 5.029989318798617e-02, 5.059602866486072e-02, 5.089216471638468e-02, 5.118830133589302e-02, 5.148443851683600e-02, 5.178057625277652e-02, 5.207671453738754e-02, 5.237285336444957e-02, 5.266899272784830e-02, 5.296513262157217e-02, 5.326127303971015e-02, 5.355741397644945e-02, 5.385355542607341e-02, 5.414969738295935e-02, 5.444583984157654e-02, 5.474198279648422e-02, 5.503812624232962e-02, 5.533427017384612e-02, 5.563041458585136e-02, 5.592655947324549e-02, 5.622270483100943e-02, 5.651885065420315e-02, 5.681499693796403e-02, 5.711114367750525e-02, 5.740729086811423e-02, 5.770343850515109e-02, 5.799958658404718e-02, 5.829573510030359e-02, 5.859188404948979e-02, 5.888803342724223e-02, 5.918418322926298e-02, 5.948033345131846e-02, 5.977648408923810e-02, 6.007263513891315e-02, 6.036878659629547e-02, 6.066493845739627e-02, 6.096109071828505e-02, 6.125724337508842e-02, 6.155339642398899e-02, 6.184954986122432e-02, 6.214570368308584e-02, 6.244185788591790e-02, 6.273801246611667e-02, 6.303416742012924e-02, 6.333032274445258e-02, 6.362647843563275e-02, 6.392263449026385e-02, 6.421879090498719e-02, 6.451494767649045e-02, 6.481110480150676e-02, 6.510726227681393e-02, 6.540342009923364e-02, 6.569957826563060e-02, 6.599573677291179e-02, 6.629189561802579e-02, 6.658805479796190e-02, 6.688421430974947e-02, 6.718037415045729e-02, 6.747653431719274e-02, 6.777269480710120e-02, 6.806885561736541e-02, 6.836501674520473e-02, 6.866117818787462e-02, 6.895733994266595e-02, 6.925350200690436e-02, 6.954966437794978e-02, 6.984582705319572e-02, 7.014199003006881e-02, 7.043815330602816e-02, 7.073431687856487e-02, 7.103048074520145e-02, 7.132664490349136e-02, 7.162280935101843e-02, 7.191897408539641e-02, 7.221513910426842e-02, 7.251130440530654e-02, 7.280746998621131e-02, 7.310363584471123e-02, 7.339980197856236e-02, 7.369596838554787e-02, 7.399213506347757e-02, 7.428830201018750e-02, 7.458446922353953e-02, 7.488063670142099e-02, 7.517680444174411e-02, 7.547297244244584e-02, 7.576914070148731e-02, 7.606530921685350e-02, 7.636147798655288e-02, 7.665764700861705e-02, 7.695381628110036e-02, 7.724998580207959e-02, 7.754615556965355e-02, 7.784232558194283e-02, 7.813849583708937e-02, 7.843466633325627e-02, 7.873083706862730e-02, 7.902700804140673e-02, 7.932317924981898e-02, 7.961935069210831e-02, 7.991552236653848e-02, 8.021169427139259e-02, 8.050786640497266e-02, 8.080403876559941e-02, 8.110021135161205e-02, 8.139638416136785e-02, 8.169255719324202e-02, 8.198873044562742e-02, 8.228490391693427e-02, 8.258107760558991e-02, 8.287725151003858e-02, 8.317342562874114e-02, 8.346959996017489e-02, 8.376577450283329e-02, 8.406194925522573e-02, 8.435812421587736e-02, 8.465429938332880e-02, 8.495047475613594e-02, 8.524665033286981e-02, 8.554282611211622e-02, 8.583900209247569e-02, 8.613517827256320e-02, 8.643135465100796e-02, 8.672753122645324e-02, 8.702370799755624e-02, 8.731988496298775e-02, 8.761606212143211e-02, 8.791223947158701e-02, 8.820841701216320e-02, 8.850459474188443e-02, 8.880077265948727e-02, 8.909695076372083e-02, 8.939312905334673e-02, 8.968930752713884e-02, 8.998548618388320e-02, 9.028166502237775e-02, 9.057784404143228e-02, 9.087402323986823e-02, 9.117020261651851e-02, 9.146638217022743e-02, 9.176256189985045e-02, 9.205874180425415e-02, 9.235492188231598e-02, 9.265110213292418e-02, 9.294728255497767e-02, 9.324346314738582e-02, 9.353964390906841e-02, 9.383582483895543e-02, 9.413200593598701e-02, 9.442818719911329e-02, 9.472436862729419e-02, 9.502055021949944e-02, 9.531673197470839e-02, 9.561291389190979e-02, 9.590909597010190e-02, 9.620527820829215e-02, 9.650146060549716e-02, 9.679764316074260e-02, 9.709382587306303e-02, 9.739000874150182e-02, 9.768619176511113e-02, 9.798237494295167e-02, 9.827855827409261e-02, 9.857474175761159e-02, 9.887092539259457e-02, 9.916710917813559e-02, 9.946329311333693e-02, 9.975947719730878e-02, 1.000556614291693e-01, 1.003518458080444e-01, 1.006480303330678e-01, 1.009442150033809e-01, 1.012403998181323e-01, 1.015365847764786e-01, 1.018327698775833e-01, 1.021289551206175e-01, 1.024251405047592e-01, 1.027213260291939e-01, 1.030175116931137e-01, 1.033136974957181e-01, 1.036098834362131e-01, 1.039060695138116e-01, 1.042022557277335e-01, 1.044984420772049e-01, 1.047946285614588e-01, 1.050908151797344e-01, 1.053870019312777e-01, 1.056831888153408e-01, 1.059793758311819e-01, 1.062755629780659e-01, 1.065717502552635e-01, 1.068679376620514e-01, 1.071641251977125e-01, 1.074603128615356e-01, 1.077565006528154e-01, 1.080526885708522e-01, 1.083488766149523e-01, 1.086450647844275e-01, 1.089412530785955e-01, 1.092374414967790e-01, 1.095336300383068e-01, 1.098298187025128e-01, 1.101260074887365e-01, 1.104221963963223e-01, 1.107183854246204e-01, 1.110145745729859e-01, 1.113107638407791e-01, 1.116069532273654e-01, 1.119031427321152e-01, 1.121993323544040e-01, 1.124955220936123e-01, 1.127917119491252e-01, 1.130879019203329e-01, 1.133840920066302e-01, 1.136802822074168e-01, 1.139764725220970e-01, 1.142726629500797e-01, 1.145688534907786e-01, 1.148650441436116e-01, 1.151612349080013e-01, 1.154574257833748e-01, 1.157536167691634e-01, 1.160498078648030e-01, 1.163459990697336e-01, 1.166421903833997e-01, 1.169383818052498e-01, 1.172345733347366e-01, 1.175307649713172e-01, 1.178269567144525e-01, 1.181231485636075e-01, 1.184193405182515e-01, 1.187155325778573e-01, 1.190117247419022e-01, 1.193079170098669e-01, 1.196041093812363e-01, 1.199003018554988e-01, 1.201964944321470e-01, 1.204926871106769e-01, 1.207888798905883e-01, 1.210850727713848e-01, 1.213812657525735e-01, 1.216774588336651e-01, 1.219736520141740e-01, 1.222698452936180e-01, 1.225660386715184e-01, 1.228622321474001e-01, 1.231584257207913e-01, 1.234546193912237e-01, 1.237508131582321e-01, 1.240470070213551e-01, 1.243432009801343e-01, 1.246393950341144e-01, 1.249355891828438e-01, 1.252317834258738e-01, 1.255279777627589e-01, 1.258241721930567e-01, 1.261203667163283e-01, 1.264165613321372e-01, 1.267127560400507e-01, 1.270089508396387e-01, 1.273051457304741e-01, 1.276013407121329e-01, 1.278975357841942e-01, 1.281937309462396e-01, 1.284899261978540e-01, 1.287861215386249e-01, 1.290823169681429e-01, 1.293785124860011e-01, 1.296747080917956e-01, 1.299709037851252e-01, 1.302670995655916e-01, 1.305632954327989e-01, 1.308594913863541e-01, 1.311556874258669e-01, 1.314518835509495e-01, 1.317480797612168e-01, 1.320442760562863e-01, 1.323404724357780e-01, 1.326366688993144e-01, 1.329328654465209e-01, 1.332290620770249e-01, 1.335252587904566e-01, 1.338214555864485e-01, 1.341176524646357e-01, 1.344138494246555e-01, 1.347100464661477e-01, 1.350062435887546e-01, 1.353024407921207e-01, 1.355986380758928e-01, 1.358948354397200e-01, 1.361910328832540e-01, 1.364872304061484e-01, 1.367834280080591e-01, 1.370796256886445e-01, 1.373758234475650e-01, 1.376720212844831e-01, 1.379682191990637e-01, 1.382644171909737e-01, 1.385606152598823e-01, 1.388568134054606e-01, 1.391530116273819e-01, 1.394492099253218e-01, 1.397454082989575e-01, 1.400416067479688e-01, 1.403378052720369e-01, 1.406340038708457e-01, 1.409302025440805e-01, 1.412264012914290e-01, 1.415226001125806e-01, 1.418187990072267e-01, 1.421149979750609e-01, 1.424111970157782e-01, 1.427073961290760e-01, 1.430035953146533e-01, 1.432997945722111e-01, 1.435959939014521e-01, 1.438921933020810e-01, 1.441883927738043e-01, 1.444845923163301e-01, 1.447807919293685e-01, 1.450769916126314e-01, 1.453731913658323e-01, 1.456693911886867e-01, 1.459655910809115e-01, 1.462617910422256e-01, 1.465579910723494e-01, 1.468541911710053e-01, 1.471503913379169e-01, 1.474465915728099e-01, 1.477427918754114e-01, 1.480389922454504e-01, 1.483351926826572e-01, 1.486313931867639e-01, 1.489275937575041e-01, 1.492237943946132e-01, 1.495199950978279e-01, 1.496680954658720e-01};
    this->p.resize(this->x.size());
    this->pSat.resize(this->x.size());

}

void Stage3::processBlock(juce::AudioBuffer<float>& buffer) {

    int channelNumber = buffer.getNumChannels();
    float array[4] = { 0,0,0,0 };
    this->w.resize(channelNumber, std::array<float, 4>{0});
    this->yBuffer.resize(channelNumber, 0.f);
    this->uBuffer.resize(channelNumber, 0.f);

    std::array<float, 4> pk{ 0 };
    float p;

    for (int channel = 0; channel < channelNumber; channel++) {
        auto channelSamples = buffer.getWritePointer(channel);
        for (int i = 0; i < buffer.getNumSamples(); i++) {

            if (std::abs((channelSamples[i]) > std::abs(this->inmax)))
                this->inmax = channelSamples[i];

            std::array<float, 4> Hw = matrixMul(H, w[channel]);
            std::array<float, 4> Ju = matrixMul(J, channelSamples[i] + uBuffer[channel]);
            std::array<float, 4> Gy = matrixMul(G, yBuffer[channel]);

            pk = matrixAdd(matrixAdd(Hw, Ju), Gy);

            p = matrixMul(D, pk) + E * channelSamples[i];
            ySave = yBuffer[channel];
            this->yBuffer[channel] = closestElementLinearInterpolate(p, this->p, this->y);
            
            Gy = matrixMul(G, yBuffer[channel]);
            wSave = w[channel];
            w[channel] = matrixAdd(Gy, pk);
            if (std::abs((channelSamples[i] + w[channel][1])) > std::abs(this->wmax))
                this->wmax = channelSamples[i] + w[channel][1];
            if (channelSamples[i] + w[channel][1] > cutOffVoltage || channelSamples[i] + w[channel][1] < -cutOffVoltage) {
                float cutOffVoltage = channelSamples[i] + w[channel][1] > this->cutOffVoltage ? this->cutOffVoltage : -this->cutOffVoltage;
                w[channel] = wSave;
                yBuffer[channel] = ySave;
                Hw = matrixMul(HSat, w[channel]);
                Ju = matrixMul(JSat, cutOffVoltage + uBuffer[channel] + w[channel][1]);
                Gy = matrixMul(GSat, yBuffer[channel]);

                pk = matrixAdd(matrixAdd(Hw, Ju), Gy);

                p = matrixMul(DSat, pk) + ESat * cutOffVoltage;
                this->yBuffer[channel] = closestElementLinearInterpolate(p, this->pSat, this->y);

                Gy = matrixMul(GSat, yBuffer[channel]);
                w[channel] = matrixAdd(Gy, pk);

                this->uBuffer[channel] = cutOffVoltage-w[channel][1];
                channelSamples[i] = cutOffVoltage + w[channel][3] - R35 * yBuffer[channel];



            }
            else {
                this->uBuffer[channel] = channelSamples[i];
                channelSamples[i] = w[channel][1] + w[channel][3] + channelSamples[i] - R35 * yBuffer[channel];
            }


        }
    }

}
